<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lint</title>
  
  <subtitle>Just Study</subtitle>
  <link href="https://github.com/taoge183/taoge183.github.io.git/atom.xml" rel="self"/>
  
  <link href="https://github.com/taoge183/taoge183.github.io.git/"/>
  <updated>2021-06-19T16:39:18.170Z</updated>
  <id>https://github.com/taoge183/taoge183.github.io.git/</id>
  
  <author>
    <name>Lint</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cookie与session</title>
    <link href="https://github.com/taoge183/taoge183.github.io.git/2021/06/20/cookie%E4%B8%8Esession/"/>
    <id>https://github.com/taoge183/taoge183.github.io.git/2021/06/20/cookie%E4%B8%8Esession/</id>
    <published>2021-06-19T16:39:33.000Z</published>
    <updated>2021-06-19T16:39:18.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>在了解cookie与session有必要了解会话，二者便是会话中的数据存储方式。</p><h3 id="什么是会话"><a href="#什么是会话" class="headerlink" title="什么是会话"></a>什么是会话</h3><p>会话可以简单的理解为：用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称为一个会话。</p><h3 id="会话过程要解决的问题"><a href="#会话过程要解决的问题" class="headerlink" title="会话过程要解决的问题"></a>会话过程要解决的问题</h3><p>每个用户与服务器进行交互的过程中，各自会有一些数据，程序要想办法保存每个用户的数据（保存在request或servletContext中的数据一旦有新的请求数据就会消失）。</p><hr><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>cookie是客户端技术，程序把每个用户的数据以cookie的形式写给用户各自的浏览器。当用户使用浏览器再去访问服务器中的web资源时，就会带着各自的数据去。这样，web资源处理的就是用户各自的数据了。</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li>一个cookie只能标识一种信息，他至少含有一个标识该信息的名称（name）和设置值（value）</li><li>一个web站点可以给一个web浏览器发送多个cookie，一个web浏览器也可以存储多个web站点提供的cookie</li><li>浏览器一般只允许存放300个cookie，每个站点最多存放20个cookie，每个cookie的大小限制为4KB</li><li>如果创建了一个cookie，并将它发送到浏览器，默认情况下它是一个会话级别的cookie（即存储在浏览器的内存中），用户退出浏览器之后即被删除。若希望浏览器将该cookie存储在磁盘上，则需要使用maxAge，并给出一个以秒为单位的时间。将最大时效设为0则是命令浏览器删除该cookie</li><li>注意，删除cookie时，path必须一致，否则不会删除<h3 id="cookie技术图"><a href="#cookie技术图" class="headerlink" title="cookie技术图"></a>cookie技术图</h3><img src="https://raw.githubusercontent.com/taoge183/source/master/cookie%E6%8A%80%E6%9C%AF%E5%9B%BE.PNG" alt="cookie技术图"></li></ul><hr><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>session是服务器端技术，利用这个技术，服务器在运行时可以为每一个用的浏览器创建一个独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去访问服务器中的其他web资源时，其他web资源再从用户各自的session中取出数据为用户服务。</p><h3 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h3><ul><li>在web开发中，服务器可以为每个用户浏览器创建一个会话对象（session对象），注意：一个浏览器独占一个session对象（默认情况下）。因此，在需要保存用户数据时，服务器程序可以把用户数据写到用户浏览器独占的session中，当用户使用浏览器访问其他程序时，其他程序可以从用户的session中取出该用户的数据，为用户服务</li><li>session对象由服务器创建，开发人员可以调用request对象的getSession方法得到session对象<h3 id="session技术图"><a href="#session技术图" class="headerlink" title="session技术图"></a>session技术图</h3><img src="https://raw.githubusercontent.com/taoge183/source/master/session%E6%8A%80%E6%9C%AF%E5%9B%BE.PNG" alt="session技术图"></li></ul><hr><h2 id="session与cookie的主要区别"><a href="#session与cookie的主要区别" class="headerlink" title="session与cookie的主要区别"></a>session与cookie的主要区别</h2><p>cookie是把用户的数据写给用户的浏览器。session技术把用户的数据写到用户独占的session中。<br><img src="https://raw.githubusercontent.com/taoge183/source/master/session%E4%B8%8Ecookie.PNG" alt="session和cookie技术图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cookie与session&quot;&gt;&lt;a href=&quot;#cookie与session&quot; class=&quot;headerlink&quot; title=&quot;cookie与session&quot;&gt;&lt;/a&gt;cookie与session&lt;/h1&gt;&lt;h2 id=&quot;会话&quot;&gt;&lt;a href=&quot;#会话&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅谈AOP</title>
    <link href="https://github.com/taoge183/taoge183.github.io.git/2021/06/18/%E6%B5%85%E8%B0%88AOP/"/>
    <id>https://github.com/taoge183/taoge183.github.io.git/2021/06/18/%E6%B5%85%E8%B0%88AOP/</id>
    <published>2021-06-18T15:38:33.000Z</published>
    <updated>2021-06-17T16:56:26.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈AOP"><a href="#浅谈AOP" class="headerlink" title="浅谈AOP"></a>浅谈AOP</h1><h2 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h2><p>AOP（Aspect Orient Programming），面向切面编程。面向切面编程是从动态角度考虑程序运行过程。AOP 底层，就是采用动态代理模式实现的。采用了两种代理：JDK 的动态代理，与 CGLIB的动态代理。</p><h2 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP(面向切面编程)"></a>AOP(面向切面编程)</h2><p>AOP 为 Aspect Oriented Programming 的缩写，意为：面向切面编程，可通过运行期动态代理实现程序功能的统一维护的一种技术。AOP 是 Spring 框架中的一个重要内容。利用 AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="https://raw.githubusercontent.com/taoge183/source/master/AOP.PNG" alt="Spring的AOP原理图"></p><hr><h2 id="AOP编程术语"><a href="#AOP编程术语" class="headerlink" title="AOP编程术语"></a>AOP编程术语</h2><h3 id="切面（Aspect）"><a href="#切面（Aspect）" class="headerlink" title="切面（Aspect）"></a>切面（Aspect）</h3><p>切面泛指交叉业务逻辑。常用的切面是通知（Advice）。实际就是对主业务逻辑的一种增强。</p><h3 id="连接点（JoinPoint）"><a href="#连接点（JoinPoint）" class="headerlink" title="连接点（JoinPoint）"></a>连接点（JoinPoint）</h3><p>连接点指可以被切面织入的具体方法。通常业务接口中的方法均为连接点。</p><h3 id="切入点（Poincut）"><a href="#切入点（Poincut）" class="headerlink" title="切入点（Poincut）"></a>切入点（Poincut）</h3><p>切入点指声明的一个或多个连接点的集合。通过切入点指定一组方法。被标记为 final 的方法是不能作为连接点与切入点的。因为最终的是不能被修改的，不能被增强的。</p><h3 id="目标对象（Target）"><a href="#目标对象（Target）" class="headerlink" title="目标对象（Target）"></a>目标对象（Target）</h3><p>目 标 对 象 指 将 要 被 增 强 的 对 象 。 即 包 含 主 业 务 逻 辑 的 类 的 对 象 。 上 例 中 的StudentServiceImpl 的对象若被增强，则该类称为目标类，该类对象称为目标对象。当然，不被增强，也就无所谓目标不目标了。</p><h3 id="通知（Advice）"><a href="#通知（Advice）" class="headerlink" title="通知（Advice）"></a>通知（Advice）</h3><p>通知表示切面的执行时间，Advice 也叫增强。上例中的 MyInvocationHandler 就可以理解为是一种通知。换个角度来说，通知定义了增强代码切入到目标代码的时间点，是目标方法执行之前执行，还是之后执行等。通知类型不同，切入时间不同。切入点定义切入的位置，通知定义切入的时间。</p><hr><h2 id="AspectJ-对-AOP-的实现"><a href="#AspectJ-对-AOP-的实现" class="headerlink" title="AspectJ 对 AOP 的实现"></a>AspectJ 对 AOP 的实现</h2><h3 id="AspectJ-中常用的五种通知类型："><a href="#AspectJ-中常用的五种通知类型：" class="headerlink" title="AspectJ 中常用的五种通知类型："></a>AspectJ 中常用的五种通知类型：</h3><p>（1）前置通知<br>（2）后置通知<br>（3）环绕通知<br>（4）异常通知<br>（5）最终通知</p><h3 id="AspectJ-的切入点表达式"><a href="#AspectJ-的切入点表达式" class="headerlink" title="AspectJ 的切入点表达式"></a>AspectJ 的切入点表达式</h3><p>AspectJ 定义了专门的表达式用于指定切入点。表达式的原型是：<br>execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)throws-pattern?)</p><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p>modifiers-pattern] 访问权限类型<br>ret-type-pattern 返回值类型<br>declaring-type-pattern 包名类名<br>name-pattern(param-pattern) 方法名(参数类型和参数个数)<br>throws-pattern 抛出异常类型<br>？表示可选的部分以上表达式共 4 个部分。<br>execution(访问权限 方法返回值 方法声明(参数) 异常类型)</p><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><table><thead><tr><th>符号</th><th align="center">意义</th></tr></thead><tbody><tr><td>*</td><td align="center">0至多个任意字符</td></tr><tr><td>..</td><td align="center">用在方法参数中，表示任意多个参数；用在包名后，表示当前包及子包路径</td></tr><tr><td>+</td><td align="center">用在类名后，表示当前类及其子类；用在接口后，表示当前接口及其实现类</td></tr></tbody></table><p>execution(public * <em>(..))<br>指定切入点为：任意公共方法。<br>execution(</em> set*(..))<br>指定切入点为：任何一个以“set”开始的方法。<br>execution(* com.xyz.service.<em>.</em>(..))<br>指定切入点为：定义在 service 包里的任意类的任意方法。<br>execution(* com.xyz.service..<em>.</em>(..))<br>指定切入点为：定义在 service 包或者子包里的任意类的任意方法。“..”出现在类名中时，后面必须跟“<em>”，表示包、子包下的所有类。<br>execution(</em> <em>..service.</em>.<em>(..))<br>指定所有包下的 serivce 子包下所有类（接口）中所有方法为切入点<br>execution(</em> <em>.service.</em>.<em>(..))<br>指定只有一级包下的 serivce 子包下所有类（接口）中所有方法为切入点<br>execution(</em> <em>.ISomeService.</em>(..))<br>指定只有一级包下的 ISomeSerivce 接口中所有方法为切入点<br>execution(* <em>..ISomeService.</em>(..))<br>指定所有包下的 ISomeSerivce 接口中所有方法为切入点<br>execution(* com.xyz.service.IAccountService.<em>(..))<br>指定切入点为：IAccountService 接口中的任意方法。<br>execution(</em> com.xyz.service.IAccountService+.<em>(..))<br>指定切入点为：IAccountService 若为接口，则为接口中的任意方法及其所有实现类中的任意方法；若为类，则为该类及其子类中的任意方法。<br>execution(</em> joke(String,int)))<br>指定切入点为：所有的 joke(String,int)方法，且 joke()方法的第一个参数是 String，第二个参数是 int。如果方法中的参数类型是 java.lang 包下的类，可以直接使用类名，否则必须使用全限定类名，如 joke( java.util.List, int)。<br>execution(* joke(String,<em>)))<br>指定切入点为：所有的 joke()方法，该方法第一个参数为 String，第二个参数可以是任意类型，如joke(String s1,String s2)和joke(String s1,double d2)都是，但joke(String s1,double d2,String s3)不是。<br>execution(</em> joke(String,..)))<br>指定切入点为：所有的 joke()方法，该方法第一个参数为 String，后面可以有任意个参数且参数类型不限，如 joke(String s1)、joke(String s1,String s2)和 joke(String s1,double d2,String s3)都是。<br>execution(* joke(Object))<br>指定切入点为：所有的 joke()方法，方法拥有一个参数，且参数是 Object 类型。joke(Object ob)是，但，joke(String s)与 joke(User u)均不是。<br>execution(* joke(Object+)))<br>指定切入点为：所有的 joke()方法，方法拥有一个参数，且参数是 Object 类型或该类的子类。不仅 joke(Object ob)是，joke(String s)和 joke(User u)也是。</p><hr><h2 id="AspectJ基于注解的AOP实现–Maven"><a href="#AspectJ基于注解的AOP实现–Maven" class="headerlink" title="AspectJ基于注解的AOP实现–Maven"></a>AspectJ基于注解的AOP实现–Maven</h2><h3 id="搭建号Maven环境"><a href="#搭建号Maven环境" class="headerlink" title="搭建号Maven环境"></a>搭建号Maven环境</h3><p>引入依赖<br>引入AOP约束</p><h3 id="定义业务接口与实现类"><a href="#定义业务接口与实现类" class="headerlink" title="定义业务接口与实现类"></a>定义业务接口与实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSome</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">doOther</span><span class="params">(String name , <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">doFirst</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSecond</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doThird</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SomeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">(String naem,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SomeServiceImpl的业务方法doSome&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOther</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SomeServiceImpl的业务方法doOther&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doFirst</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SomeServiceImpl的业务方法doFirst&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;doFirst&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSecond</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SomeServiceImpl的业务方法doSecond&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doThird</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SomeServiceImpl的业务方法doThird&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义切面类"><a href="#定义切面类" class="headerlink" title="定义切面类"></a>定义切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 切面类：是用来给业务方法增强功能的</span></span><br><span class="line"><span class="comment">* @Aspect：是aspectj框架中的，表示当前类是切面类</span></span><br><span class="line"><span class="comment">*       位置：在类的定义上面使用</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//有功能增强的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 定义方法实现功能增强，方法的定义格式</span></span><br><span class="line"><span class="comment">    * 1.public方法</span></span><br><span class="line"><span class="comment">    * 2.一般都是void返回值（环绕通知除外）</span></span><br><span class="line"><span class="comment">    * 3.方法名称自定义</span></span><br><span class="line"><span class="comment">    * 4.方法可以有参数，参数的类型有限制</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Before:前置通知</span></span><br><span class="line"><span class="comment">    * 属性：value表示切入点表达式，表示切面执行的位置</span></span><br><span class="line"><span class="comment">    * 位置：方法定义的上面</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 特点：1.在目标方法之前先执行的</span></span><br><span class="line"><span class="comment">    *       2.不会影响目标方法的执行</span></span><br><span class="line"><span class="comment">    *       3.不会改变目标方法的执行结果</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 获取doSome方法在执行时候的信息</span></span><br><span class="line"><span class="comment">    * 参数：JoinPoint表示连接点（业务方法），</span></span><br><span class="line"><span class="comment">    *       连接点是切入点中的一个方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* com.bjpowernode.service.SomeServiceImpl.doSome(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        <span class="comment">//在方法中，实现功能的增强，例如日志代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知：在目标方法之前，执行日志的功能&quot;</span>);</span><br><span class="line">        <span class="comment">//获取方法定义</span></span><br><span class="line">        System.out.println(<span class="string">&quot;连接点的方法定义：&quot;</span>+jp.getSignature());</span><br><span class="line">        System.out.println(<span class="string">&quot;连接点的方法名称：&quot;</span>+jp.getSignature().getName());</span><br><span class="line">        <span class="comment">//获取方法执行时的参数</span></span><br><span class="line">        Object args [] = jp.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">            System.out.println(arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @AfterReturning:后置通知</span></span><br><span class="line"><span class="comment">    *   属性：value：切入点表达式</span></span><br><span class="line"><span class="comment">    *          returning:自定义的变量，表示目标方法的放回值的</span></span><br><span class="line"><span class="comment">    *                    变量的名称必须和通知方法的参数名一样</span></span><br><span class="line"><span class="comment">    *   位置：方法的上面</span></span><br><span class="line"><span class="comment">    * 特点：</span></span><br><span class="line"><span class="comment">    * 1.在目标方法之后执行的</span></span><br><span class="line"><span class="comment">    * 2.能够获取到目标方法的执行结果</span></span><br><span class="line"><span class="comment">    * 3.修改目标方法不会影响最后的执行结果</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* *..SomeServiceImpl.doOther(..))&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturing</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">//修改目标方法返回置</span></span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String st = (String)result;</span><br><span class="line">            result = st.toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知，在目标方法之后执行的。能够获取到目标方法的执行结果:&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Around:环绕通知</span></span><br><span class="line"><span class="comment">    *   属性：value切入点表达式</span></span><br><span class="line"><span class="comment">    *   位置：方法定义的上面</span></span><br><span class="line"><span class="comment">    * 特点：</span></span><br><span class="line"><span class="comment">    *   1.在目标方法的前和后都能增强功能</span></span><br><span class="line"><span class="comment">    *   2.控制目标方法是否执行</span></span><br><span class="line"><span class="comment">    *   3.修改目标方法的执行结果</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 环绕通知方法的定义：</span></span><br><span class="line"><span class="comment">    * 1.参数proceedingJoinPoint</span></span><br><span class="line"><span class="comment">    * 2.有返回值，推荐使用object</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* *..SomeServiceImpl.doFirst(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String name= <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Object args [] = pjp.getArgs();</span><br><span class="line">        <span class="keyword">if</span>(args.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            name = (String)args[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知：在目标方法之前加入日志&quot;</span>);</span><br><span class="line">        <span class="comment">//控制目标是否执行</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;zs&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="comment">//执行目标方法</span></span><br><span class="line">            result = pjp.proceed();<span class="comment">//doFirst result = method.invoke(target,args);</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知：在目标方法之后加入事务处理&quot;</span>);</span><br><span class="line">        <span class="comment">//返回目标方法的执行结果（可以是修改后的结果）</span></span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            result = <span class="string">&quot;Hello Aspectj&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @AfterThrowing:异常通知</span></span><br><span class="line"><span class="comment">     *       属性： value:切入点表达式</span></span><br><span class="line"><span class="comment">     *           throwing:自定义的变量，表示目标方法抛出异常现象，必须和通知方法的参数名一样</span></span><br><span class="line"><span class="comment">     *       位置：方法定义的上面</span></span><br><span class="line"><span class="comment">     * 特点：</span></span><br><span class="line"><span class="comment">     * 1.在目标方法抛出异常时执行的，可以看作是对目标方法监控</span></span><br><span class="line"><span class="comment">     * 2.不是异常处理程序，异常还是抛出</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//@AfterThrowing(value = &quot;execution(* *..SomeServiceImpl.doSecond(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;mypt()&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfterThrowing</span><span class="params">(Throwable ex)</span></span>&#123;</span><br><span class="line">        <span class="comment">//能够获取异常信息</span></span><br><span class="line">        <span class="comment">//1.把异常记录下来  2.发送通知</span></span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知：在目标方法抛出异常时执行的，异常原因：&quot;</span>+ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @After:最终通知</span></span><br><span class="line"><span class="comment">    *   属性：value切入点表达式</span></span><br><span class="line"><span class="comment">    *   位置：在方法的定义的上面</span></span><br><span class="line"><span class="comment">    * 特点：</span></span><br><span class="line"><span class="comment">    * 1.在目标方法之后执行</span></span><br><span class="line"><span class="comment">    * 2.总是会被执行</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* *..SomeServiceImpl.doThird(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知，总是会被被执行的，可以做收尾工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Pointcut：定义和管理切入点</span></span><br><span class="line"><span class="comment">    *   属性：value切入点表达式</span></span><br><span class="line"><span class="comment">    *   位置：在自定义的方法上面</span></span><br><span class="line"><span class="comment">    * 作用：@Pointcut定义在方法的上面，这个方法的名称就是切入点的别名</span></span><br><span class="line"><span class="comment">    * 其他的通知注解的value属性可以使用方法名称，表示切入点</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* *..SomeServiceImpl.doSecond(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mypt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//无需代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--申明目标类对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;SomeServiceTarget&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.service.SomeServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明切面类对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.aspect.MyAspect&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明自动代理生成器：使用aspectj把spring容器中目标类对象生成代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String config = <span class="string">&quot;applicationContext.xml&quot;</span>;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从spring的容器中获取目标对象（代理对象）</span></span><br><span class="line">        SomeService proxy = (SomeService) ctx.getBean(<span class="string">&quot;SomeServiceTarget&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理对象执行业务方法，实现功能的增强</span></span><br><span class="line">        proxy.doSome(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String config = <span class="string">&quot;applicationContext.xml&quot;</span>;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从spring的容器中获取目标对象（代理对象）</span></span><br><span class="line">        SomeService proxy = (SomeService) ctx.getBean(<span class="string">&quot;SomeServiceTarget&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理对象执行业务方法，实现功能的增强</span></span><br><span class="line">        String str;</span><br><span class="line">        str = proxy.doOther(<span class="string">&quot;zs&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;str:&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String config = <span class="string">&quot;applicationContext.xml&quot;</span>;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从spring的容器中获取目标对象（代理对象）</span></span><br><span class="line">        SomeService proxy = (SomeService) ctx.getBean(<span class="string">&quot;SomeServiceTarget&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理对象执行业务方法，实现功能的增强</span></span><br><span class="line">        String str;</span><br><span class="line">        str = proxy.doFirst(<span class="string">&quot;zs&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;str:&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String config = <span class="string">&quot;applicationContext.xml&quot;</span>;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从spring的容器中获取目标对象（代理对象）</span></span><br><span class="line">        SomeService proxy = (SomeService) ctx.getBean(<span class="string">&quot;SomeServiceTarget&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理对象执行业务方法，实现功能的增强</span></span><br><span class="line">        proxy.doSecond(<span class="string">&quot;zs&quot;</span>,<span class="number">21</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String config = <span class="string">&quot;applicationContext.xml&quot;</span>;</span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从spring的容器中获取目标对象（代理对象）</span></span><br><span class="line">        SomeService proxy = (SomeService) ctx.getBean(<span class="string">&quot;SomeServiceTarget&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理对象执行业务方法，实现功能的增强</span></span><br><span class="line">        proxy.doThird();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>面向切面编程，就是将交叉业务逻辑封装成切面，利用 AOP 容器的功能将切面织入到主业务逻辑中。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志、缓存等。<br>若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅谈AOP&quot;&gt;&lt;a href=&quot;#浅谈AOP&quot; class=&quot;headerlink&quot; title=&quot;浅谈AOP&quot;&gt;&lt;/a&gt;浅谈AOP&lt;/h1&gt;&lt;h2 id=&quot;AOP简介&quot;&gt;&lt;a href=&quot;#AOP简介&quot; class=&quot;headerlink&quot; title=&quot;AOP</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>浅谈Spring ioc</title>
    <link href="https://github.com/taoge183/taoge183.github.io.git/2021/02/14/%E6%B5%85%E8%B0%88Spring-ioc/"/>
    <id>https://github.com/taoge183/taoge183.github.io.git/2021/02/14/%E6%B5%85%E8%B0%88Spring-ioc/</id>
    <published>2021-02-14T15:38:33.000Z</published>
    <updated>2021-02-16T14:41:29.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IOC（控制反转）"><a href="#IOC（控制反转）" class="headerlink" title="IOC（控制反转）"></a>IOC（控制反转）</h1><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h3 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h3><p>控制对象的创建，属性的赋值，依赖关系的管理。以及对象从创建到销毁的整个生命周期。</p><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><p>把开发人员在代码中创建的权限交给代码之外的Spring容器，Spring框架可以说是一个工厂，可以生产管理Java对象，当我们需要用到对象时可以直接从Spring容器中获取就行，不用再自己创建。</p><hr><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="DL"><a href="#DL" class="headerlink" title="DL"></a>DL</h3><p>依赖查找。</p><h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><p>依赖注入，我们在代码中只需要提供对象的名称，对象的获取、赋值都由容器自己完成。若追究Spring框架的底层原理则是Java的反射机制。</p><hr><h2 id="Spring的IOC原理图"><a href="#Spring的IOC原理图" class="headerlink" title="Spring的IOC原理图"></a>Spring的IOC原理图</h2><p><img src="https://raw.githubusercontent.com/taoge183/source/master/Springioc.PNG" alt="Spring的IOC原理图"></p><hr><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h3 id="编写Java对象"><a href="#编写Java对象" class="headerlink" title="编写Java对象"></a>编写Java对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;School&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引用类型</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> School <span class="title">getSchool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchool</span><span class="params">(School school)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSchool:&quot;</span>+school);</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, school=&quot;</span> + school +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XML配置文件"><a href="#XML配置文件" class="headerlink" title="XML配置文件"></a>XML配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zlt.bean02.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span><span class="comment">&lt;!--setNaem(李四)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span><span class="comment">&lt;!--setAge(20)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myschool&quot;</span>/&gt;</span><span class="comment">&lt;!--setSchool()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明School--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myschool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zlt.bean02.School&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京大学&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="主类调用"><a href="#主类调用" class="headerlink" title="主类调用"></a>主类调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义spring配置文件</span></span><br><span class="line">        String config = <span class="string">&quot;applicationContext.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//创建Spring的容器对象，根据spring配置文件的位置，使用接口的不同实现类</span></span><br><span class="line">        <span class="comment">//如果spring的配置文件是在类路径（classpath），使用ClassPathXmlApplicationContext</span></span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(config);</span><br><span class="line">        <span class="comment">//从容器中获取对象，使用getBean(&quot;&lt;bean&gt;的id&quot;)</span></span><br><span class="line">        SomeService student = (SomeService) ctx.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">        <span class="comment">//输出对象</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>Spring框架可以说是一个工厂，可以生产管理Java对象，当我们需要用到对象时可以直接从Spring容器中获取就行，不用再自己创建。以此也达到了解耦合的目的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IOC（控制反转）&quot;&gt;&lt;a href=&quot;#IOC（控制反转）&quot; class=&quot;headerlink&quot; title=&quot;IOC（控制反转）&quot;&gt;&lt;/a&gt;IOC（控制反转）&lt;/h1&gt;&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://github.com/taoge183/taoge183.github.io.git/2021/02/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/taoge183/taoge183.github.io.git/2021/02/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-02-12T14:06:37.000Z</published>
    <updated>2021-02-12T14:27:29.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>捣鼓了好几天，终于有了自己的博客。功能不是很完善，但是勉强还能看吧。感谢hexo上大佬的开源框架，以及b站上的大佬视频。</p><p>写博客的目的还是以学习为主。主要还是记录自己的学习心得，还有一些笔记和知识点。记录下来一是加强自己的记忆对知识点的二次记忆，二是当作笔记可以随时翻阅。当然分享出来也希望能和小伙伴们一起学习，有什么不足的地方也欢迎大家指正。</p><p>在过去的时间里也有学了一些东西，但是到了真正开始写博客的时候却有一种无从下笔的感觉。可能是之前的学习方法不太对，也可能是忘了一些。希望通过写博客可以将过去学过的知识捡回来一些，同时提高现在的学习效率。</p><p>文章也会不定时更新。最后祝大家新年快乐，心想事成，牛年大吉。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;捣鼓了好几天，终于有了自己的博客。功能不是很完善，但是勉强还能看吧。感谢hexo上大佬的开源框架，以及b站上的大佬视频。&lt;/</summary>
      
    
    
    
    
  </entry>
  
</feed>
